#!/usr/bin/env python3
"""
Script para descobrir TODAS as fun√ß√µes dispon√≠veis no endpoint SOAP
Autor: Paulo - Professional Services
Objetivo: Enumerar todas as opera√ß√µes dispon√≠veis no servi√ßo SOAP Sophia Plus
"""

from zeep import Client
from datetime import datetime
import logging
import os

# --- Setup Logging ---
log_dir = "LOGS"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# Generate timestamped log file
log_file_name = f"all_soap_functions_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.md"
log_file_path = os.path.join(log_dir, log_file_name)

# Custom Markdown formatter
class MarkdownFormatter(logging.Formatter):
    def format(self, record):
        msg = record.getMessage()
        
        if "üéØ" in msg:
            return f"# {msg}"
        elif "üë§" in msg:
            return f"**{msg}**\n"
        elif "üìä" in msg and "DESCOBERTA" in msg:
            return f"\n## {msg}"
        elif "üîç" in msg and "WSDL" in msg:
            return f"\n### {msg}"
        elif msg.startswith("‚úÖ"):
            return f"**{msg}**"
        elif msg.startswith("   üîπ"):
            return f"- {msg.replace('   üîπ ', '')}"
        elif msg.startswith("üìã"):
            return f"\n### {msg}"
        elif "Total de opera√ß√µes" in msg:
            return f"\n**{msg}**"
        elif msg.startswith("   "):
            return f"  {msg.strip()}"
        else:
            return msg

# Setup logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# File handler
file_handler = logging.FileHandler(log_file_path, encoding='utf-8')
file_handler.setFormatter(MarkdownFormatter())

# Console handler
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(message)s'))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# Write Markdown header
with open(log_file_path, 'w', encoding='utf-8') as f:
    f.write(f"# üîç Descoberta Completa - Todas as Fun√ß√µes SOAP\n")
    f.write(f"**Data:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n")
    f.write(f"**Autor:** Paulo - Professional Services  \n")
    f.write(f"**Objetivo:** Enumerar TODAS as fun√ß√µes dispon√≠veis no endpoint SOAP\n")
    f.write(f"**Endpoint:** https://elpusonlinelisboaqa.ipam.pt/WebSAPI/\n\n")

def discover_all_soap_operations():
    """Descobre todas as opera√ß√µes SOAP dispon√≠veis no WSDL"""
    wsdl_url = "https://elpusonlinelisboaqa.ipam.pt/WebSAPI/websapi.asmx?WSDL"
    
    try:
        logger.info("üîç ANALISANDO WSDL...")
        logger.info(f"   URL: {wsdl_url}")
        
        # Criar cliente SOAP
        client = Client(wsdl_url)
        
        # Obter informa√ß√µes do servi√ßo
        service = client.service
        
        # Listar todas as opera√ß√µes
        operations = []
        
        logger.info("üìä DESCOBERTA DE OPERA√á√ïES")
        
        # Iterar sobre todas as opera√ß√µes dispon√≠veis
        for operation_name in dir(service):
            if not operation_name.startswith('_'):
                operations.append(operation_name)
        
        # Ordenar alfabeticamente
        operations.sort()
        
        logger.info(f"‚úÖ Total de opera√ß√µes encontradas: {len(operations)}")
        
        logger.info("üìã LISTA COMPLETA DE OPERA√á√ïES:")
        
        for i, operation in enumerate(operations, 1):
            logger.info(f"   üîπ {i:3d}. {operation}")
            
            # Tentar obter informa√ß√µes sobre a opera√ß√£o
            try:
                operation_obj = getattr(service, operation)
                # Algumas opera√ß√µes podem ter documenta√ß√£o
                if hasattr(operation_obj, '__doc__') and operation_obj.__doc__:
                    logger.info(f"      üìù {operation_obj.__doc__.strip()}")
            except:
                pass
        
        return operations
        
    except Exception as e:
        logger.error(f"‚ùå ERRO ao analisar WSDL: {str(e)}")
        return []

def analyze_wsdl_details():
    """An√°lise detalhada do WSDL"""
    wsdl_url = "https://elpusonlinelisboaqa.ipam.pt/WebSAPI/websapi.asmx?WSDL"
    
    try:
        logger.info("üîç AN√ÅLISE DETALHADA DO WSDL")
        
        client = Client(wsdl_url)
        
        # Informa√ß√µes do servi√ßo
        logger.info("üìã INFORMA√á√ïES DO SERVI√áO:")
        logger.info(f"   üîπ Nome do servi√ßo: {client.wsdl.services}")
        
        # Bindings dispon√≠veis
        logger.info("üìã BINDINGS DISPON√çVEIS:")
        for binding_name, binding in client.wsdl.bindings.items():
            logger.info(f"   üîπ {binding_name}")
        
        # Tipos dispon√≠veis
        logger.info("üìã TIPOS DE DADOS:")
        for type_name, type_obj in client.wsdl.types.items():
            logger.info(f"   üîπ {type_name}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå ERRO na an√°lise detalhada: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal"""
    
    logger.info("üéØ DESCOBERTA COMPLETA DE FUN√á√ïES SOAP")
    logger.info("üë§ Paulo - Professional Services")
    
    # Descobrir todas as opera√ß√µes
    all_operations = discover_all_soap_operations()
    
    if all_operations:
        logger.info(f"üéâ SUCESSO! Descobrimos {len(all_operations)} opera√ß√µes!")
        
        # An√°lise detalhada
        analyze_wsdl_details()
        
        # Compara√ß√£o com nossas 10 fun√ß√µes selecionadas
        our_selected_functions = [
            'GetInst', 'GetAlunos', 'GetDocentes', 'GetCursos', 
            'GetAnosLect', 'GetPeriodos', 'GetTpCursos', 'ValidaLogin',
            'GetAluDadosPessoais', 'GetFunDadosPessoais'
        ]
        
        logger.info("üìä COMPARA√á√ÉO COM NOSSAS 10 FUN√á√ïES SELECIONADAS:")
        
        found_our_functions = []
        for func in our_selected_functions:
            if func in all_operations:
                found_our_functions.append(func)
                logger.info(f"   ‚úÖ {func} - ENCONTRADA")
            else:
                logger.info(f"   ‚ùå {func} - N√ÉO ENCONTRADA")
        
        logger.info(f"   üìä Das nossas 10 fun√ß√µes: {len(found_our_functions)} encontradas")
        
        # Fun√ß√µes adicionais que descobrimos
        additional_functions = [op for op in all_operations if op not in our_selected_functions]
        
        if additional_functions:
            logger.info(f"üîç FUN√á√ïES ADICIONAIS DESCOBERTAS ({len(additional_functions)}):")
            for func in additional_functions[:20]:  # Mostrar apenas as primeiras 20
                logger.info(f"   üîπ {func}")
            
            if len(additional_functions) > 20:
                logger.info(f"   ... e mais {len(additional_functions) - 20} fun√ß√µes")
        
    else:
        logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel descobrir as opera√ß√µes")
    
    # Write final summary
    with open(log_file_path, 'a', encoding='utf-8') as f:
        f.write(f"\n\n## üéâ Resumo Final\n")
        f.write(f"- **Total de opera√ß√µes descobertas:** {len(all_operations)}\n")
        f.write(f"- **Status:** {'Sucesso' if all_operations else 'Falha'}\n")
        f.write(f"- **Endpoint funcional:** {'Sim' if all_operations else 'N√£o'}\n")
        f.write(f"\n---\n**Descoberta realizada em:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    logger.info(f"üìÑ Log completo salvo em: {log_file_path}")

if __name__ == "__main__":
    main() 