#!/usr/bin/env python3
"""
Script para descobrir TODAS as fun√ß√µes INTERNAS do Sophia Plus
Usando a opera√ß√£o GetFunctionsList do SOAP
Autor: Paulo - Professional Services
"""

from zeep import Client
import xml.etree.ElementTree as ET
from datetime import datetime
import logging
import os

# --- Setup Logging ---
log_dir = "LOGS"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_file_name = f"all_internal_functions_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.md"
log_file_path = os.path.join(log_dir, log_file_name)

# Setup logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

file_handler = logging.FileHandler(log_file_path, encoding='utf-8')
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter('%(message)s'))

logger.addHandler(file_handler)
logger.addHandler(console_handler)

# Write Markdown header
with open(log_file_path, 'w', encoding='utf-8') as f:
    f.write(f"# üîç Todas as Fun√ß√µes Internas do Sophia Plus\n")
    f.write(f"**Data:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  \n")
    f.write(f"**Autor:** Paulo - Professional Services  \n")
    f.write(f"**M√©todo:** Opera√ß√£o GetFunctionsList do SOAP  \n")
    f.write(f"**Objetivo:** Descobrir TODAS as fun√ß√µes internas dispon√≠veis\n\n")

def get_all_internal_functions():
    """Usa GetFunctionsList para descobrir todas as fun√ß√µes internas"""
    wsdl_url = "https://elpusonlinelisboaqa.ipam.pt/WebSAPI/websapi.asmx?WSDL"
    
    try:
        logger.info("üîç USANDO GetFunctionsList para descobrir fun√ß√µes internas...")
        
        client = Client(wsdl_url)
        
        # Teste com diferentes formatos
        formats_to_try = [
            {'FormatoInput': 'JSON', 'FormatoOutput': 'JSON'},
            {'FormatoInput': 'XML', 'FormatoOutput': 'XML'},
            {'FormatoInput': '', 'FormatoOutput': ''}
        ]
        
        for i, params in enumerate(formats_to_try, 1):
            logger.info(f"   üîÑ Tentativa {i}: {params}")
            
            try:
                response = client.service.GetFunctionsList(**params)
                
                if response:
                    logger.info(f"   ‚úÖ Resposta recebida ({len(response)} caracteres)")
                    logger.info("   üìù Resposta completa:")
                    logger.info(f"{response}")
                    return response
                else:
                    logger.info("   ‚ùå Sem resposta")
                    
            except Exception as e:
                logger.info(f"   ‚ùå Erro: {str(e)}")
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå ERRO GERAL: {str(e)}")
        return None

def main():
    """Fun√ß√£o principal"""
    
    logger.info("üéØ DESCOBERTA COMPLETA DE FUN√á√ïES INTERNAS")
    logger.info("üë§ Paulo - Professional Services")
    
    # Descobrir todas as fun√ß√µes internas
    response = get_all_internal_functions()
    
    if response:
        logger.info("‚úÖ Conseguimos obter resposta do GetFunctionsList!")
        
        # Write response to file
        with open(log_file_path, 'a', encoding='utf-8') as f:
            f.write(f"\n## üìã Resposta do GetFunctionsList\n\n")
            f.write(f"```xml\n{response}\n```\n")
    else:
        logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel obter lista de fun√ß√µes")
    
    logger.info(f"üìÑ Log salvo em: {log_file_path}")

if __name__ == "__main__":
    main() 